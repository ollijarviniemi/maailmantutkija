/**
 * Functions5 Game Rules - 5-variate Functions
 * 10 mathematical function rules for five variables
 */

export const FUNCTIONS5_RULES = [
    {
        id: 'f5_1',
        name: 'a b c d e ➝ a + b + c + d + e (summa)',
        arity: 5,
        check: (a, b, c, d, e) => a + b + c + d + e,
        testInputs: [
            [1, 2, 3, 4, 5], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [2, 3, 5, 7, 11],
            [5, 5, 5, 5, 5], [1, 0, 0, 0, 0], [10, 5, 3, 2, 1], [2, 4, 6, 8, 10],
            [0, 1, 2, 3, 4], [3, 6, 9, 12, 15], [1, 2, 1, 2, 1], [8, 7, 6, 5, 4],
            [3, 4, 5, 6, 7], [4, 4, 0, 4, 4], [8, 2, 7, 5, 3], [5, 10, 15, 20, 25]
        ]
    },
    {
        id: 'f5_2',
        name: 'a b c d e ➝ max(a, b, c, d, e) (suurin luvuista)',
        arity: 5,
        check: (a, b, c, d, e) => Math.max(a, b, c, d, e),
        testInputs: [
            [1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [3, 3, 3, 3, 3], [10, 5, 8, 2, 7],
            [0, 0, 0, 0, 1], [1, 0, 0, 0, 0], [5, 5, 5, 5, 10], [2, 8, 3, 6, 4],
            [6, 9, 3, 7, 12], [0, 5, 0, 0, 0], [7, 7, 8, 7, 7], [1, 2, 1, 2, 1],
            [15, 10, 12, 8, 14], [3, 7, 5, 9, 6], [20, 15, 18, 12, 16], [4, 4, 5, 4, 4],
            [10, 35, 47, 23, 41], [57, 32, 72, 48, 66], [9, 17, 28, 33, 4], [31, 41, 59, 26, 53]
        ]
    },
    {
        id: 'f5_3',
        name: 'Yleisimmän luvun esiintymiskertojen määrä',
        arity: 5,
        check: (a, b, c, d, e) => {
            const counts = {};
            [a, b, c, d, e].forEach(n => counts[n] = (counts[n] || 0) + 1);
            return Math.max(...Object.values(counts));
        },
        testInputs: [
            [1, 1, 1, 1, 1], [1, 2, 3, 4, 5], [5, 5, 5, 3, 5], [2, 2, 2, 3, 4],
            [1, 1, 2, 3, 2], [7, 7, 8, 8, 9], [3, 3, 3, 4, 5], [1, 2, 1, 2, 1],
            [5, 5, 6, 7, 8], [4, 4, 2, 4, 5], [2, 3, 2, 3, 2], [10, 10, 11, 12, 13],
            [6, 6, 6, 7, 7], [1, 1, 1, 2, 2], [8, 9, 8, 9, 8], [3, 3, 4, 4, 4],
            [7, 7, 7, 7, 7], [8, 12, 3, 5, 12], [9, 9, 4, 9, 9], [15, 15, 23, 26, 51]
        ]
    },
    {
        id: 'f5_4',
        name: 'Mediaani (keskimmäinen luku, kun luvut järjestää suuruusjärjestykseen)',
        arity: 5,
        check: (a, b, c, d, e) => {
            const sorted = [a, b, c, d, e].sort((x, y) => x - y);
            return sorted[2];
        },
        testInputs: [
            [1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [3, 3, 3, 3, 3], [1, 5, 7, 3, 9],
            [10, 2, 4, 6, 8], [0, 0, 5, 0, 0], [7, 1, 4, 9, 3], [2, 8, 6, 3, 5],
            [1, 1, 2, 10, 1], [5, 6, 5, 7, 8], [0, 10, 5, 15, 20], [3, 7, 9, 5, 1],
            [4, 4, 4, 5, 6], [2, 2, 3, 8, 9], [3, 5, 8, 99, 100], [6, 2, 10, 4, 8],
            [7, 2, 6, 8, 10], [5, 6, 6, 9, 10], [9, 3, 5, 9, 9], [12, 10, 10, 13, 14]
        ]
    },
    {
        id: 'f5_5',
        name: 'max - min (vaihteluväli pienimmästä suurimpaan)',
        arity: 5,
        check: (a, b, c, d, e) => Math.max(a, b, c, d, e) - Math.min(a, b, c, d, e),
        testInputs: [
            [1, 2, 3, 4, 5], [5, 5, 5, 5, 5], [0, 10, 5, 3, 7], [1, 1, 1, 1, 2],
            [10, 5, 8, 2, 7], [0, 0, 0, 0, 1], [3, 8, 5, 6, 4], [7, 7, 8, 7, 7],
            [2, 2, 10, 2, 2], [1, 5, 1, 5, 1], [0, 3, 6, 9, 12], [4, 7, 4, 7, 4],
            [15, 10, 12, 8, 14], [3, 3, 3, 4, 4], [20, 15, 18, 12, 16], [5, 5, 6, 6, 7],
            [7, 2, 6, 8, 10], [5, 6, 6, 9, 10], [9, 3, 5, 9, 9], [12, 10, 10, 13, 14],
            [6, 6, 6, 7, 7], [1, 1, 1, 2, 2], [8, 9, 8, 9, 8], [3, 3, 4, 4, 4],
            [10, 2, 6, 4, 8], [0, 0, 5, 0, 0], [7, 1, 4, 9, 3], [2, 8, 5, 3, 6]
        ]
    },
    {
        id: 'f5_6',
        name: 'a b c d e ➝ a + 2*b + 3*c + 4*d + 5*e',
        arity: 5,
        check: (a, b, c, d, e) => a + 2*b + 3*c + 4*d + 5*e,
        testInputs: [
            [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0, 0],
            [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1], [2, 2, 2, 2, 2],
            [1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [3, 3, 3, 3, 3], [1, 1, 2, 2, 3],
            [5, 0, 0, 0, 1], [2, 3, 1, 4, 0], [1, 0, 1, 0, 1], [4, 3, 2, 1, 0],
            [3, 2, 1, 0, 0], [0, 1, 0, 1, 0], [1, 0, 2, 0, 1], [0, 3, 0, 3, 0]
        ]
    },
    {
        id: 'f5_7',
        name: 'Pienin etäisyys kahden listan luvun välillä',
        arity: 5,
        check: (a, b, c, d, e) => {
            const nums = [a, b, c, d, e].sort((x, y) => x - y);
            let minDiff = Infinity;
            for (let i = 0; i < nums.length - 1; i++) {
                minDiff = Math.min(minDiff, nums[i + 1] - nums[i]);
            }
            return minDiff;
        },
        testInputs: [
            [1, 2, 3, 4, 5], [5, 5, 5, 5, 5], [1, 3, 5, 7, 9], [0, 10, 20, 30, 40],
            [1, 1, 10, 20, 30], [5, 6, 15, 16, 25], [2, 4, 6, 8, 10], [1, 5, 6, 10, 15],
            [3, 3, 7, 10, 15], [0, 1, 5, 10, 20], [7, 8, 8, 15, 20], [2, 5, 8, 11, 14],
            [10, 10, 11, 20, 30], [1, 4, 7, 10, 13], [5, 10, 11, 20, 25], [0, 5, 5, 10, 15],
            [10, 40, 11, 20, 30], [11, 54, 97, 20, 18], [10, 20, 40, 60, 80]
        ]
    },
    {
        id: 'f5_8',
        name: 'a b c d e ➝ peräkkäisten lukujen etäisyyksien summa, mukaan lukien viimeisen ja ensimmäisen (|a-b| + |b-c| + |c-d| + |d-e| + |e-a|)',
        arity: 5,
        check: (a, b, c, d, e) => {
            return Math.abs(a - b) + Math.abs(b - c) + Math.abs(c - d) +
                   Math.abs(d - e) + Math.abs(e - a);
        },
        testInputs: [
            [1, 2, 3, 4, 5], [5, 5, 5, 5, 5], [1, 3, 5, 7, 9], [0, 10, 0, 10, 0],
            [5, 4, 3, 2, 1], [1, 1, 5, 5, 1], [2, 4, 2, 4, 2], [0, 5, 10, 5, 0],
            [3, 6, 3, 6, 3], [1, 2, 1, 2, 1], [0, 0, 10, 0, 0], [5, 10, 15, 10, 5],
            [2, 2, 8, 2, 2], [1, 4, 7, 4, 1], [3, 3, 3, 8, 8], [0, 3, 6, 3, 0],
            [3, 2, 1, 0, 2], [2, 5, 0, 3, 0]
        ]
    },
    {
        id: 'f5_9',
        name: 'Kolmen suurimman luvun summa',
        arity: 5,
        check: (a, b, c, d, e) => {
            const sorted = [a, b, c, d, e].sort((x, y) => y - x);
            return sorted[0] + sorted[1] + sorted[2];
        },
        testInputs: [
            [1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [10, 10, 10, 1, 1], [5, 5, 5, 5, 5],
            [1, 1, 1, 10, 10], [8, 7, 6, 5, 4], [0, 0, 5, 10, 15], [3, 6, 9, 12, 15],
            [2, 2, 2, 8, 8], [1, 5, 10, 15, 20], [7, 7, 7, 2, 3], [4, 8, 12, 16, 20],
            [10, 5, 8, 3, 7], [1, 1, 2, 9, 9], [6, 6, 6, 1, 1], [3, 4, 5, 6, 7],
            [2, 2, 8, 2, 2], [1, 4, 7, 4, 1], [3, 3, 3, 8, 8], [0, 3, 6, 3, 0],
            [2, 2, 10, 2, 2], [1, 5, 1, 5, 1], [0, 3, 6, 9, 12], [4, 7, 4, 7, 4],
        ]
    },
    {
        id: 'f5_10',
        name: 'Lukujen keskiarvoa suurempien lukujen määrä',
        arity: 5,
        check: (a, b, c, d, e) => {
            const average = (a+b+c+d+e)/5;
            const nums = [a, b, c, d, e]
            let num = 0
            for (let i = 0; i < nums.length; ++i) {
                if (nums[i] > average) {
                    num += 1;
                }
            }
            return num
        },
        testInputs: [
            [1, 2, 3, 4, 5], [5, 5, 5, 5, 5], [1, 1, 1, 10, 10], [0, 0, 0, 0, 10],
            [10, 10, 10, 1, 1], [1, 5, 5, 5, 9], [2, 2, 2, 8, 8], [0, 5, 10, 15, 20],
            [3, 3, 3, 3, 3], [1, 1, 5, 9, 9], [4, 4, 4, 4, 9], [2, 6, 6, 6, 10],
            [1, 2, 3, 8, 9], [0, 0, 5, 5, 5], [7, 7, 7, 7, 7], [1, 4, 5, 6, 9],
            [2, 2, 10, 2, 2], [1, 5, 1, 5, 1], [0, 3, 6, 9, 12], [4, 7, 4, 7, 4],
            [7, 2, 6, 8, 10], [5, 6, 6, 9, 10], [9, 3, 5, 9, 9], [12, 10, 10, 13, 14],
            [1, 1, 0, 1, 1], [100, 10, 5, 9, 8]
        ]
    },
];
